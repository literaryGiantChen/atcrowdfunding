<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:cantext="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       https://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

  <!-- 将service层扫描到IOC容器中 -->
  <cantext:component-scan base-package="com.diu.crowd.service"/>

  <!-- 配置事务管理器 -->
  <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <!-- 配置数据源 -->
    <property name="dataSource" ref="dataSource"/>
  </bean>

  <!-- 配置事务前面 -->
  <aop:config>
    <!-- 简写实现业务方法名 com.diu.crowd.service.impl.adminServiceImpl.save(Admin admin)
      考虑后期要整合springSecurity，避免把userDetailsService加入事务，让切入点表达式定位service
    -->
    <aop:pointcut id="txPointcut" expression="execution(* *..*ServiceImpl.*(..))"/>

    <!-- 将切入点表达式和事务通知关联起来 -->
    <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
  </aop:config>

  <!-- 配置事务通知 -->
  <tx:advice id="txAdvice" transaction-manager="txManager">
    <!-- 配置事务属性 -->
    <tx:attributes>
      <!-- 查看方法：配置只读属性，让数据库知道这是一个查询操作，能进行一定的优化 -->
      <tx:method name="get*" read-only="true"/>
      <tx:method name="find*" read-only="true"/>
      <tx:method name="count*" read-only="true"/>
      <tx:method name="query*" read-only="true"/>

      <!-- 增删查改方式:配置事务传播行为，回滚异常 -->
      <!-- propagation 属性配置事务方法的传播行为 -->
      <!-- 默认值：REQUIRED 表示：当前方法必须运行在事务中，如果没有事务，则开启事务，在自己的事务中运行。
              如果已经有了已开启的事务，则在当前事务中运行。
           总结：有可能和其他方法共用同一个事务
      -->
      <!-- 建议值：REQUIRES_NEW 表示：当前方法必须运行在事务中，如果没有事务， 则开启事务，在自己的事务中运行。
              和 REQUIRED 的区别是就算现在已经有了已开启的事务，也一定要开启自己的事务。
            总结：避免和其他方法共用同一个事务
      -->
      <!-- rollback-for 属性配置回滚的异常
              默认值：运行时异常
              建议值：编译时异常+运行时异常
      -->
      <tx:method name="save*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
      <tx:method name="remove*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
      <tx:method name="update*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
    </tx:attributes>
  </tx:advice>

</beans>